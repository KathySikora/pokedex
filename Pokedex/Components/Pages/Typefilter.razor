@page "/typefilter"
@inject PokedexService PokedexService

<h1>Filter Pokémon by Type, Ability, or Size</h1>

<div class="filters">
    <select @onchange="HandleTypeSelection" class="filter-dropdown">
        <option value="">Select a Type</option>
        @foreach (var type in types)
        {
            <option value="@type.Name" selected="@(selectedType == type.Name ? "selected" : null)">@type.Name</option>
        }
    </select>

    <select @onchange="HandleAbilitySelection" class="filter-dropdown">
        <option value="">Select an Ability</option>
        @foreach (var ability in abilities)
        {
            <option value="@ability.Name" selected="@(selectedAbility == ability.Name ? "selected" : null)">@ability.Name</option>
        }
    </select>

    <select @onchange="HandleSizeSelection" class="filter-dropdown">
        <option value="">Select a Size</option>
        <option value="small" selected="@(selectedSize == "small" ? "selected" : null)">Small (&lt; 1m)</option>
        <option value="medium" selected="@(selectedSize == "medium" ? "selected" : null)">Medium (1-2m)</option>
        <option value="large" selected="@(selectedSize == "large" ? "selected" : null)">Large (&gt; 2m)</option>
    </select>
</div>

@if (isLoadingPokemons && !filteredPokemons.Any())
{
    <p>Loading Pokémon...</p>
}
else if (filteredPokemons.Any())
{
    <div class="card-container">
        @foreach (var pokemon in filteredPokemons)
        {
            <div class="card">
                <img src="@pokemon.ImageUrl" alt="@pokemon.Name" class="card-img" />
                <div class="card-content">
                    <h3>@pokemon.Name</h3>
                </div>
            </div>
        }
    </div>
}
else if (!string.IsNullOrWhiteSpace(selectedType) || !string.IsNullOrWhiteSpace(selectedAbility) || !string.IsNullOrWhiteSpace(selectedSize))
{
    <p>No Pokémon found for the selected filter.</p>
}

@code {
    @inject MetaService MetaService
    private List<TypeItem> types = new();
    private List<AbilityItem> abilities = new();
    private List<Pokemon> allPokemons = new();
    private List<Pokemon> filteredPokemons = new();
    private string selectedType = string.Empty;
    private string selectedAbility = string.Empty;
    private string selectedSize = string.Empty;
    private bool isLoadingPokemons = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadFilters();
        _ = LazyLoadPokemons();
    }

    private async Task LoadFilters()
    {
        try
        {
            types = await MetaService.GetTypesAsync();
            abilities = await MetaService.GetAbilitiesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading filters: {ex.Message}");
        }
    }

    private async Task LazyLoadPokemons()
    {
        isLoadingPokemons = true;

        try
        {
            await foreach (var batch in PokedexService.GetPokemonBatchesAsync())
            {
                allPokemons.AddRange(batch);
                ApplyCurrentFilters();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error lazy loading Pokémon: {ex.Message}");
        }
        finally
        {
            isLoadingPokemons = false;
        }
    }

    private void HandleTypeSelection(ChangeEventArgs e)
    {
        selectedType = e.Value?.ToString() ?? string.Empty;

        // Reset other filters
        selectedAbility = string.Empty;
        selectedSize = string.Empty;

        ApplyCurrentFilters();
    }

    private void HandleAbilitySelection(ChangeEventArgs e)
    {
        selectedAbility = e.Value?.ToString() ?? string.Empty;

        // Reset other filters
        selectedType = string.Empty;
        selectedSize = string.Empty;

        ApplyCurrentFilters();
    }

    private void HandleSizeSelection(ChangeEventArgs e)
    {
        selectedSize = e.Value?.ToString() ?? string.Empty;

        // Reset other filters
        selectedType = string.Empty;
        selectedAbility = string.Empty;

        ApplyCurrentFilters();
    }

    private void ApplyCurrentFilters()
    {
        if (!string.IsNullOrWhiteSpace(selectedType))
        {
            filteredPokemons = allPokemons
                .Where(p => p.Types.Contains(selectedType, StringComparer.OrdinalIgnoreCase))
                .ToList();
        }
        else if (!string.IsNullOrWhiteSpace(selectedAbility))
        {
            filteredPokemons = allPokemons
                .Where(p => p.Abilities.Contains(selectedAbility, StringComparer.OrdinalIgnoreCase))
                .ToList();
        }
        else if (!string.IsNullOrWhiteSpace(selectedSize))
        {
            filteredPokemons = selectedSize switch
            {
                "small" => allPokemons.Where(p => p.Height < 10).ToList(),
                "medium" => allPokemons.Where(p => p.Height >= 10 && p.Height <= 20).ToList(),
                "large" => allPokemons.Where(p => p.Height > 20).ToList(),
                _ => new List<Pokemon>()
            };
        }
        else
        {
            filteredPokemons.Clear();
        }
    }
}
