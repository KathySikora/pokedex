@page "/pokedex"
@inject NavigationManager NavigationManager

<h1>Pokédex</h1>

<input type="text" placeholder="Search Pokémon by name..." @bind="searchTerm" @bind:event="oninput" class="search-box" />

@if (isLoading)
{
    <p>Loading...</p>
}
else if (SearchedPokemons.Any())
{
    <div class="card-container">
        @foreach (var pokemon in SearchedPokemons)
        {
            <div class="card">
                <img src="@pokemon.ImageUrl" alt="@pokemon.Name" class="card-img" @onclick="() => ShowPokemonDetails(pokemon)" />
                <div class="card-content">
                    <h3>@pokemon.Name</h3>
                    <button class="detail-button" @onclick="() => ShowPokemonDetails(pokemon)">Details</button>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>No Pokémon match your search.</p>
}

@code {
    [Inject]
    private PokedexService PokedexService { get; set; }

    private List<Pokemon> pokemons = new();
    private string searchTerm = string.Empty;
    private bool isLoading = false;

    private IEnumerable<Pokemon> SearchedPokemons =>
        string.IsNullOrWhiteSpace(searchTerm)
            ? pokemons
            : pokemons.Where(pokemon => pokemon.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    protected override async Task OnInitializedAsync()
    {
        await FetchPokemonData();
    }

    private async Task FetchPokemonData()
    {
        isLoading = true;
        try
        {
            pokemons = await PokedexService.GetPokemonsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowPokemonDetails(Pokemon pokemon)
    {
        NavigationManager.NavigateTo($"/pokemon/{pokemon.Id}");
    }
}
